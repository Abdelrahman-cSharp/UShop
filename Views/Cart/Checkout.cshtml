@model UShop.Models.Order

<h2 class="mb-4">Checkout</h2>

<!-- Customer Info -->
<div class="card shadow-sm p-3 mb-4">
	<div class="d-flex justify-content-between align-items-center mb-2">
		<h4 class="mb-0">
			Delivered to
			@(string.IsNullOrEmpty(Model.Customer.FullName)
						? Html.Raw("<span class='text-danger'>No name provided</span>")
						: Model.Customer.FullName)
		</h4>
		<a asp-controller="Customer" asp-action="Edit" asp-route-id="@Model.Customer.Id"
			 class="btn btn-sm btn-outline-primary">Edit Profile</a>
	</div>

	@if (string.IsNullOrEmpty(Model.Customer.FullName) ||
		string.IsNullOrEmpty(Model.Customer.PhoneNumber) ||
		string.IsNullOrEmpty(Model.Customer.Address))
	{
		<div class="alert alert-danger">
			Some of your profile information is missing.
			Please edit your profile before confirming the order.
		</div>
		<input type="hidden" id="profileIncomplete" value="true" />
	}

	<p>
		<strong>Phone Number:</strong>
		@(string.IsNullOrEmpty(Model.Customer.PhoneNumber)
				? Html.Raw("<span class='text-danger'>No phone number provided</span>")
				: Model.Customer.PhoneNumber)
																 	</p>

	<p>
		<strong>Address:</strong>
		@(string.IsNullOrEmpty(Model.Customer.Address)
				? Html.Raw("<span class='text-danger'>No address provided</span>")
				: Model.Customer.Address)
	</p>
</div>



<!-- Order Items -->
<div class="card shadow-sm p-3 mb-4">
	<h4>Order Items</h4>
	<table class="table table-striped">
		<thead>
			<tr>
				<th>Product</th>
				<th>Qty</th>
				<th>Price</th>
				<th>Total</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model.Items)
			{
				<tr>
					<td>@item.Product?.Name</td>
					<td>@item.Quantity</td>
					<td>@item.UnitPrice.ToString("C")</td>
					<td>@item.TotalPrice.ToString("C")</td>
				</tr>
			}
		</tbody>
	</table>
	<p class="fw-bold text-end">Total: @Model.TotalAmount.ToString("C")</p>
</div>


<!-- Payment Method -->
<div class="card shadow-sm p-3">
	<h4>Payment Method</h4>
	<form id="checkoutForm" asp-action="Checkout" method="post">
		<input type="hidden" asp-for="CustomerId" />

		<!-- Radio buttons -->
		<div class="mb-3">
			<div class="form-check">
				<input class="form-check-input" type="radio" name="PaymentMethod" id="codOption" value="CashOnDelivery" checked>
				<label class="form-check-label" for="codOption">Cash on Delivery</label>
			</div>
			<div class="form-check">
				<input class="form-check-input" type="radio" name="PaymentMethod" id="creditCardOption" value="CreditCard">
				<label class="form-check-label" for="creditCardOption">Credit Card</label>
			</div>
		</div>

		<!-- Credit Card Section -->
		<div id="creditCardSection" style="display:none;">
			@if (Model.Customer?.CreditCard != null)
			{
				<div class="mb-3">
					<label class="form-label">Saved Card</label>
					<div class="form-check">
						<input class="form-check-input" type="radio" name="UseSavedCard" id="savedCard" value="true" checked>
						<label class="form-check-label" for="savedCard">
							**** **** **** @Model.Customer.CreditCard.CardNumber.Substring(Model.Customer.CreditCard.CardNumber.Length - 4)
							(exp: @Model.Customer.CreditCard.ExpiryMonth/@Model.Customer.CreditCard.ExpiryYear)
						</label>
					</div>
				</div>
			}
			else
			{
				<div class="alert alert-danger" id="noCardAlert">
					No credit card saved in your profile. Please <a asp-controller="Customer" asp-action="Edit" asp-route-id="@Model.Customer.Id">add one</a> or choose Cash on Delivery.
				</div>
			}
		</div>

		<button type="submit" id="confirmOrderBtn" class="btn btn-success w-100 mt-3">Confirm Order</button>
	</form>
</div>


@section Scripts {
	<script>
		const creditCardSection = document.getElementById("creditCardSection");
		const confirmOrderBtn = document.getElementById("confirmOrderBtn");
		const profileIncomplete = document.getElementById("profileIncomplete");

		const codOption = document.getElementById("codOption");
		const creditCardOption = document.getElementById("creditCardOption");
		const savedCard = document.getElementById("savedCard");
		const newCard = document.getElementById("newCard");
		const newCardForm = document.getElementById("newCardForm");
		const noCardAlert = document.getElementById("noCardAlert");

		function togglePaymentMethod() {
			creditCardSection.style.display = creditCardOption.checked ? "block" : "none";
			validateCheckout();
		}

		function toggleNewCardForm() {
			if (newCard && newCard.checked && newCardForm) {
				newCardForm.style.display = "block";
				newCardForm.querySelectorAll('input').forEach(input => input.value = '');
			} else if (newCardForm) {
				newCardForm.style.display = "none";
			}
			validateCheckout();
		}

		function validateCheckout() {
			if (profileIncomplete) {
				disableConfirm();
				return;
			}

			if (codOption.checked) {
				enableConfirm();
				return;
			}

			if (creditCardOption.checked) {
				if (!savedCard && !newCardForm) {
					disableConfirm();
					return;
				}

				if (savedCard) {
					enableConfirm();
					return;
				}

				if (newCard && newCard.checked && newCardForm) {
					const cardNumber = document.getElementById("CardNumber")?.value.trim();
					const cardHolder = document.getElementById("CardHolder")?.value.trim();
					const expiryMonth = document.getElementById("ExpiryMonth")?.value.trim();
					const expiryYear = document.getElementById("ExpiryYear")?.value.trim();
					const cvv = document.getElementById("CVV")?.value.trim();

					if (!cardNumber || !cardHolder || !expiryMonth || !expiryYear || !cvv) {
						disableConfirm();
						return;
					}
					enableConfirm();
					return;
				}

				disableConfirm();
				return;
			}
		}

		function disableConfirm() {
			confirmOrderBtn.disabled = true;
			confirmOrderBtn.classList.add("btn-secondary");
			confirmOrderBtn.classList.remove("btn-success");
		}

		function enableConfirm() {
			confirmOrderBtn.disabled = false;
			confirmOrderBtn.classList.add("btn-success");
			confirmOrderBtn.classList.remove("btn-secondary");
		}

		// Event listeners
		codOption.addEventListener("change", togglePaymentMethod);
		creditCardOption.addEventListener("change", togglePaymentMethod);
		if (savedCard) savedCard.addEventListener("change", toggleNewCardForm);
		if (newCard) newCard.addEventListener("change", toggleNewCardForm);
		if (newCardForm) {
			newCardForm.querySelectorAll("input").forEach(input =>
				input.addEventListener("input", validateCheckout)
			);
		}

		// Initial setup
		togglePaymentMethod();
		toggleNewCardForm();

		// 🔥 Fix for back button cache
		window.addEventListener("pageshow", function () {
			validateCheckout();
		});
	</script>
}

