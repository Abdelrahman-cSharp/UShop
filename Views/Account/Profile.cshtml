@model UserProfileViewModel

@{
	ViewData["Title"] = "Profile";
}

<!-- UI -->
<div class="container py-5">
	<!-- Profile Header -->
	<div class="profile-header animate__animated animate__fadeInDown">
		<div class="row align-items-center p-4">
			<div class="col-md-3 text-center">
				<div class="profile-avatar mx-auto floating"
					 data-bs-toggle="modal"
					 data-bs-target="#avatarModal"
					 style="cursor:pointer;">
					<img src="@Model.ProfileImageUrl"
						 alt="Profile Avatar"
						 class="img-fluid rounded-circle"
						 onerror="this.src='/images/avatars/default.svg';" />

					<div class="avatar-overlay">
						<i class="fas fa-camera fa-2x text-white"></i>
					</div>
				</div>
			</div>

			<div class="col-md-6">
				<h2 class="text-white mb-2 fw-bold">@Model.FullName</h2>
				<p class="text-white-50 mb-1">@Model.Email</p>
				@if (!string.IsNullOrEmpty(Model.PhoneNumber))
				{
					<p class="text-white-50 mb-2"><i class="fas fa-phone me-2"></i>@Model.PhoneNumber</p>
				}
				else
				{
					<p class="text-warning mb-2"><i class="fas fa-exclamation-triangle me-2"></i>No phone number</p>
				}
				<span class="badge-modern">@Model.GetUserTypeDisplayName()</span>
			</div>

			<div class="col-md-3 text-end">
				<button class="edit-button" data-bs-toggle="modal" data-bs-target="#editPersonalModal">
					<i class="fas fa-edit me-2"></i>Edit Profile
				</button>
			</div>
		</div>
	</div>

	<!--  Statistics Cards -->
	@if (Model.UserType == UserType.Seller)
	{
		<div class="row mb-4">
			<div class="col-md-3 col-sm-6 mb-3">
				<div class="stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.1s;">
					<i class="fas fa-shopping-bag fa-2x text-primary mb-3"></i>
					<div class="stat-number">@Model.OrdersCount</div>
					<p class="text-muted mb-0">Total Orders</p>
				</div>
			</div>
			<div class="col-md-3 col-sm-6 mb-3">
				<div class="stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.2s;">
					<i class="fas fa-dollar-sign fa-2x text-success mb-3"></i>
					<div class="stat-number">@Model.TotalSpent.ToString("C")</div>
					<p class="text-muted mb-0">Total Spent</p>
				</div>
			</div>
			<div class="col-md-3 col-sm-6 mb-3">
				<div class="stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.3s;">
					<i class="fas fa-box fa-2x text-info mb-3"></i>
					<div class="stat-number">@Model.ProductsCount</div>
					<p class="text-muted mb-0">@(Model.UserType == UserType.Seller ? "Products" : "Wishlist Items")</p>
				</div>
			</div>
			<div class="col-md-3 col-sm-6 mb-3">
				<div class="stat-card animate__animated animate__fadeInUp" style="animation-delay: 0.4s;">
					<i class="fas fa-star fa-2x text-warning mb-3"></i>
					<div class="stat-number">@Model.TotalRevenue.ToString("C")</div>
					<p class="text-muted mb-0">@(Model.UserType == UserType.Seller ? "Revenue" : "Saved Amount")</p>
				</div>
			</div>
		</div>
	}


	<div class="row">
		<!-- Address Information (For Customers) -->
		@if (Model.UserType == UserType.Customer)
		{
			<div class="col-12">
				<div class="section-card animate__animated animate__fadeInRight shadow-sm rounded">
					<div class="section-header d-flex justify-content-between align-items-center px-3 pt-3">
						<h4 class="mb-0">
							<i class="fas fa-map-marker-alt me-2 text-primary"></i> Address
						</h4>

						@if (Model.Address != null)
						{
							<div class="btn-group">
								<button class="edit-button"
										data-bs-toggle="modal"
										data-bs-target="#editAddressModal">
									<i class="fas fa-edit me-1"></i> Edit
								</button>

								<form asp-action="DeleteAddress" asp-route-id="@Model.Address.Id" method="post" class="d-inline">
									<button type="submit" class="btn btn-sm btn-danger"
											onclick="return confirm('Are you sure you want to delete this address?');">
										<i class="fas fa-trash-alt me-1"></i> Delete
									</button>
								</form>
							</div>
						}
					</div>

					<div class="p-4">
						@if (Model.Address != null)
						{
							<div class="mb-3">
								<label class="text-muted small">Street Address</label>
								<p class="fw-semibold mb-0">@Model.Address.Street</p>
							</div>
							<div class="mb-3">
								<label class="text-muted small">City</label>
								<p class="fw-semibold mb-0">@Model.Address.City</p>
							</div>
							<div>
								<label class="text-muted small">Country</label>
								<p class="fw-semibold mb-0">@Model.Address.Country</p>
							</div>
						}
						else
						{
							<div class="text-center text-muted py-3">
								<i class="fas fa-map-marker-alt fa-3x mb-3"></i>
								<p>No address information available.</p>
								<button class="btn btn-primary"
										data-bs-toggle="modal"
										data-bs-target="#editAddressModal">
									Add Address
								</button>
							</div>
						}
					</div>
				</div>
			</div>
		}

		<!-- Credit Cards Section -->
		<div class="col-12">
			<div class="section-card animate__animated animate__fadeInUp">
				<div class="section-header">
					<div class="d-flex justify-content-between align-items-center">
						<h4 class="mb-0"><i class="fas fa-credit-card me-2"></i>Payment Methods</h4>
					</div>
				</div>
				<div class="p-4">
					<div class="row">
						@if (Model.CreditCards != null && Model.CreditCards.Any())
						{
							@foreach (var card in Model.CreditCards)
							{
								<div class="col-md-6 col-lg-4">
									<div class="credit-card card-gradient-@((Model.CreditCards.ToList().IndexOf(card) % 4) + 1)">
										<div class="d-flex justify-content-between align-items-start mb-3">
											<div class="credit-card-chip"></div>
											<i class="fab fa-cc-visa fa-2x"></i>

											<div class="dropdown">
												<li><a class="dropdown-item text-danger" href="#" onclick="deleteCard(@card.Id)">Delete</a></li>
											</div>
										</div>
										<div class="mb-3">
											<p class="mb-0 small opacity-75">Card Number</p>
											<h5 class="mb-0">**** **** **** @card.CardNumber.Substring(card.CardNumber.Length - 4)</h5>
										</div>
										<div class="row">
											<div class="col">
												<p class="mb-0 small opacity-75">Cardholder</p>
												<p class="mb-0 fw-semibold">@card.CardholderName</p>
											</div>
											<div class="col text-end">
												<p class="mb-0 small opacity-75">Expires</p>
												<p class="mb-0 fw-semibold">@card.ExpiryMonth/@card.ExpiryYear</p>
											</div>
										</div>
									</div>
								</div>
							}
						}

						<!-- Add New Card Placeholder -->
						<div class="col-md-6 col-lg-4">
							<div class="credit-card" style="background: linear-gradient(135deg, #e0e0e0 0%, #f5f5f5 100%); color: #666; border: 2px dashed #ccc;"
								 data-bs-toggle="modal" data-bs-target="#addCardModal">
								<div class="text-center h-100 d-flex flex-column justify-content-center">
									<i class="fas fa-plus fa-3x mb-3"></i>
									<h5>Add New Card</h5>
									<p class="mb-0 small">Click to add a payment method</p>
								</div>
							</div>
						</div>
					</div>

					@if (Model.CreditCards == null || !Model.CreditCards.Any())
					{
						<div class="text-center text-muted py-4">
							<i class="fas fa-credit-card fa-3x mb-3"></i>
							<p>No payment methods added yet.</p>

							<button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCardModal">
								Add Your First Card
							</button>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
</div>


<!-- Edit Personal Info Modal -->
<div class="modal fade" id="editPersonalModal" tabindex="-1">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title"><i class="fas fa-user-edit me-2"></i>Edit Personal Information</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<form asp-action="EditProfile" method="post" id="personalForm">
					@Html.AntiForgeryToken()
					<input type="hidden" asp-for="UserId" />
					<input type="hidden" asp-for="Id" />
					<input type="hidden" asp-for="UserType" />

					<div class="row">
						<div class="col-md-12 mb-3">
							<label class="form-label">Full Name</label>
							<input type="text" class="form-control" asp-for="FullName" required>
							<span asp-validation-for="FullName" class="text-danger"></span>
						</div>

						@if (Model.UserType == UserType.Customer || Model.UserType == UserType.Seller)
						{
							<div class="col-md-12 mb-3">
								<label class="form-label">Phone Number</label>
								<input type="tel" class="form-control" asp-for="PhoneNumber">
								<span asp-validation-for="PhoneNumber" class="text-danger"></span>
							</div>
						}

						@if (Model.UserType == UserType.Admin)
						{
							<div class="col-12 mb-3">
								<label class="form-label">Description</label>
								<textarea class="form-control" asp-for="Description" rows="3"></textarea>
								<span asp-validation-for="Description" class="text-danger"></span>
							</div>
						}
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-primary" onclick="document.getElementById('personalForm').submit();">
					<i class="fas fa-save me-2"></i>Save Changes
				</button>
			</div>
		</div>
	</div>
</div>

<!-- Add/Edit Address Modal -->
@if (Model.UserType == UserType.Customer)
{
	var isNewAddress = Model.Address == null;

	<div class="modal fade" id="editAddressModal" tabindex="-1">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">
						<i class="fas fa-map-marker-alt me-2"></i>
						@(isNewAddress ? "Add Address" : "Edit Address")
					</h5>
					<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
				</div>

				<div class="modal-body">
					<form asp-controller="Address"
						  asp-action="Save"
						  method="post"
						  id="addressForm">
						@Html.AntiForgeryToken()
						<div class="mb-3">
							<label class="form-label">Street Address</label>
							<input type="text"
								   class="form-control"
								   name="Street"
								   value="@(isNewAddress ? "" : Model.Address?.Street)"
								   placeholder="123 Main St"
								   required />
						</div>

						<div class="row">
							<div class="col-md-6 mb-3">
								<label class="form-label">City</label>
								<input type="text"
									   class="form-control"
									   name="City"
									   value="@(isNewAddress ? "" : Model.Address?.City)"
									   placeholder="City"
									   required />
							</div>
							<div class="col-md-6 mb-3">
								<label class="form-label">Country</label>
								<input type="text"
									   class="form-control"
									   name="Country"
									   value="@(isNewAddress ? "" : Model.Address?.Country)"
									   placeholder="Country"
									   required />
							</div>
						</div>
					</form>
				</div>

				<div class="modal-footer">
					<button type="button"
							class="btn btn-secondary"
							data-bs-dismiss="modal">
						Cancel
					</button>

					<button type="button"
							class="btn btn-primary"
							onclick="document.getElementById('addressForm').submit();">
						<i class="fas fa-save me-2"></i>
						@(isNewAddress ? "Add Address" : "Save Changes")
					</button>
				</div>
			</div>
		</div>
	</div>
}


<!-- Add Credit Card Modal -->
<div class="modal fade" id="addCardModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">
					<i class="fas fa-credit-card me-2"></i>Add New Credit Card
				</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
			</div>

			<form asp-action="AddCard" asp-controller="Account" method="post" id="addCardForm">
				@Html.AntiForgeryToken()
				<input type="hidden" name="CustomerId" value="@Model.Id" />

				<div class="modal-body">
					<div class="mb-3">
						<label class="form-label">Card Number</label>
						<!-- ✅ keeps spaces while typing -->
						<input type="text"
							   class="form-control"
							   name="CardNumber"
							   placeholder="1234 5678 9012 3456"
							   maxlength="19"
							   required
							   oninput="formatCardNumber(this)">
					</div>
					<div class="mb-3">
						<label class="form-label">Cardholder Name</label>
						<input type="text" class="form-control" name="CardholderName" required>
					</div>
					<div class="row">
						<div class="col-md-4 mb-4">
							<label class="form-label">Month</label>
							<select class="form-select" name="ExpiryMonth" required>
								<option value="">MM</option>
								@for (int i = 1; i <= 12; i++)
								{
									<option value="@i.ToString("D2")">@i.ToString("D2")</option>
								}
							</select>
						</div>
						<div class="col-md-4 mb-4">
							<label class="form-label">Year</label>
							<select class="form-select" name="ExpiryYear" required>
								<option value="">YYYY</option>
								@for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 10; i++)
								{
									<option value="@i">@i</option>
								}
							</select>
						</div>
						<div class="col-md-4 mb-4">
							<label class="form-label">CVV</label>
							<input type="password" class="form-control" name="CVV"
								   placeholder="123" maxlength="4" required>
						</div>
					</div>
				</div>

				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<!-- ✅ plain submit button -->
					<button type="submit" class="btn btn-primary">
						<i class="fas fa-save me-2"></i>Add Card
					</button>
				</div>
			</form>
		</div>
	</div>
</div>

<!-- Delete Card Confirmation Modal -->
<div class="modal fade" id="deleteCardModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title"><i class="fas fa-exclamation-triangle me-2"></i>Delete Credit Card</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to delete this credit card? This action cannot be undone.</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<form asp-action="DeleteCard" method="post" style="display: inline;" id="deleteCardForm">
					@Html.AntiForgeryToken()
					<input type="hidden" name="id" id="deleteCardId" />
					<button type="submit" class="btn btn-danger">
						<i class="fas fa-trash me-2"></i>Delete Card
					</button>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Upload modal -->
<div class="modal fade" id="avatarModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Update Profile Picture</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>

			<form asp-action="UploadProfileImage"
				  method="post"
				  enctype="multipart/form-data">
				@Html.AntiForgeryToken()
				<div class="modal-body">
					<input type="file"
						   name="profileImage"
						   accept="image/*"
						   class="form-control"
						   required>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="submit" class="btn btn-primary">Save</button>
				</div>
			</form>
		</div>
	</div>
</div>


@section Scripts {
	<script src="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.js"></script>
	<script>
		function deleteCard(cardId) {
			document.getElementById('deleteCardId').value = cardId;
			$('#deleteCardModal').modal('show');
		}

		// Card number formatting
		function formatCardNumber(input) {
			let value = input.value.replace(/\s/g, '').replace(/[^0-9]/gi, '');
			let formattedValue = value.match(/.{1,4}/g)?.join(' ') || value;
			input.value = formattedValue;
		}

		// Initialize animations on scroll
		function animateOnScroll() {
			const elements = document.querySelectorAll('.section-card, .stat-card');
			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						entry.target.classList.add('animate__animated', 'animate__fadeInUp');
					}
				});
			});

			elements.forEach(element => {
				observer.observe(element);
			});
		}

		// Avatar upload preview
		function previewAvatar(input) {
			if (input.files && input.files[0]) {
				const reader = new FileReader();
				reader.onload = function(e) {
					document.getElementById('avatarImg').src = e.target.result;
				}
				reader.readAsDataURL(input.files[0]);
			}
		}

		// Initialize page
		document.addEventListener('DOMContentLoaded', function() {
			animateOnScroll();

			// Add floating animation to avatar
			const avatar = document.querySelector('.profile-avatar');
			if (avatar) {
				avatar.classList.add('floating');
			}

			// Add pulse animation to add card button
			const addCardBtn = document.querySelector('.add-card-button');
			if (addCardBtn) {
				addCardBtn.classList.add('pulse');
			}
		});

		// Enhanced card interactions
		document.querySelectorAll('.credit-card').forEach(card => {
			card.addEventListener('mouseenter', function() {
				this.style.transform = 'translateY(-10px) rotateX(5deg)';
			});

			card.addEventListener('mouseleave', function() {
				this.style.transform = 'translateY(0) rotateX(0)';
			});
		});

		// Form validation enhancements
		document.querySelectorAll('.form-control').forEach(input => {
			input.addEventListener('focus', function() {
				this.parentElement.classList.add('focused');
			});

			input.addEventListener('blur', function() {
				this.parentElement.classList.remove('focused');
				if (this.value) {
					this.parentElement.classList.add('filled');
				} else {
					this.parentElement.classList.remove('filled');
				}
			});
		});
	</script>
}

@section Styles {
	<style>

		.credit-card p {
			color: #fff !important;
		}

		:root {
			--primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			--secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
			--success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
			--warning-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
			--card-shadow: 0 10px 30px rgba(0,0,0,0.1);
			--hover-shadow: 0 20px 40px rgba(0,0,0,0.15);
			--border-radius: 15px;
		}

		* {
			transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
		}

		body {
			background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
			min-height: 100vh;
		}

		.profile-header {
			background: var(--primary-gradient);
			border-radius: var(--border-radius);
			box-shadow: var(--card-shadow);
			position: relative;
			overflow: hidden;
			margin-bottom: 2rem;
		}

			.profile-header::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: url('data:image/svg+xml,<svg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><g fill="%23ffffff" fill-opacity="0.1"><circle cx="30" cy="30" r="4"/></g></svg>');
				opacity: 0.5;
			}

		.profile-avatar {
			width: 120px;
			height: 120px;
			border-radius: 50%;
			border: 5px solid white;
			box-shadow: 0 10px 30px rgba(0,0,0,0.2);
			position: relative;
			overflow: hidden;
			cursor: pointer;
		}

			.profile-avatar:hover {
				transform: scale(1.05);
				box-shadow: 0 15px 40px rgba(0,0,0,0.3);
			}

			.profile-avatar img {
				width: 100%;
				height: 100%;
				object-fit: cover;
			}

		.avatar-overlay {
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(0,0,0,0.5);
			display: flex;
			align-items: center;
			justify-content: center;
			opacity: 0;
			transition: opacity 0.3s ease;
		}

		.profile-avatar:hover .avatar-overlay {
			opacity: 1;
		}

		.section-card {
			background: white;
			border-radius: var(--border-radius);
			box-shadow: var(--card-shadow);
			border: none;
			margin-bottom: 2rem;
			overflow: hidden;
		}

			.section-card:hover {
				box-shadow: var(--hover-shadow);
				transform: translateY(-5px);
			}

		.section-header {
			background: var(--primary-gradient);
			color: white;
			padding: 1.5rem;
			position: relative;
			overflow: hidden;
		}

			.section-header::before {
				content: '';
				position: absolute;
				top: -50%;
				right: -50%;
				width: 100%;
				height: 200%;
				background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
				transform: translateX(100%);
				transition: transform 0.6s;
			}

		.section-card:hover .section-header::before {
			transform: translateX(-100%);
		}

		.edit-button {
			background: var(--success-gradient);
			border: none;
			border-radius: 50px;
			padding: 0.5rem 1.5rem;
			color: white;
			font-weight: 500;
			box-shadow: 0 5px 15px rgba(0,0,0,0.2);
			text-decoration: none;
		}

			.edit-button:hover {
				transform: translateY(-2px);
				box-shadow: 0 8px 25px rgba(0,0,0,0.3);
				color: white;
				text-decoration: none;
			}

		.add-card-button {
			background: var(--secondary-gradient);
			border: none;
			border-radius: 50px;
			padding: 1rem 2rem;
			color: white;
			font-weight: 600;
			font-size: 1.1rem;
			box-shadow: 0 8px 25px rgba(0,0,0,0.2);
		}

			.add-card-button:hover {
				transform: translateY(-3px);
				box-shadow: 0 12px 35px rgba(0,0,0,0.3);
				color: white;
			}

		.credit-card {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			border-radius: 15px;
			padding: 1.5rem;
			color: white;
			position: relative;
			overflow: hidden;
			cursor: pointer;
			margin-bottom: 1rem;
			text-decoration: none;
		}

			.credit-card::before {
				content: '';
				position: absolute;
				top: -50%;
				right: -50%;
				width: 100%;
				height: 200%;
				background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
				transform: translateX(100%);
				transition: transform 0.8s;
			}

			.credit-card:hover::before {
				transform: translateX(-100%);
			}

			.credit-card:hover {
				transform: translateY(-5px);
				box-shadow: 0 15px 35px rgba(0,0,0,0.2);
				color: white;
				text-decoration: none;
			}

		.credit-card-chip {
			width: 35px;
			height: 25px;
			background: linear-gradient(135deg, #ffd700, #ffed4e);
			border-radius: 5px;
			margin-bottom: 1rem;
		}

		.info-item {
			background: #f8f9fa;
			border-radius: 10px;
			padding: 1rem;
			margin-bottom: 1rem;
			border-left: 4px solid #667eea;
			transition: all 0.3s ease;
		}

			.info-item:hover {
				background: #e9ecef;
				transform: translateX(5px);
			}

		.stat-card {
			background: white;
			border-radius: var(--border-radius);
			padding: 1.5rem;
			text-align: center;
			box-shadow: var(--card-shadow);
			position: relative;
			overflow: hidden;
		}

			.stat-card::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				height: 4px;
				background: var(--primary-gradient);
			}

			.stat-card:hover {
				transform: translateY(-8px);
				box-shadow: var(--hover-shadow);
			}

		.stat-number {
			font-size: 2rem;
			font-weight: bold;
			background: var(--primary-gradient);
			-webkit-background-clip: text;
			-webkit-text-fill-color: transparent;
			background-clip: text;
		}

		.modal-content {
			border-radius: var(--border-radius);
			border: none;
			box-shadow: 0 20px 60px rgba(0,0,0,0.3);
		}

		.modal-header {
			background: var(--primary-gradient);
			color: white;
			border-radius: var(--border-radius) var(--border-radius) 0 0;
			border: none;
		}

		.form-control {
			height: auto; /* or a fixed value like 38px */
			border-radius: 10px;
			border: 2px solid #e9ecef;
			padding: 0.75rem 1rem;
			transition: all 0.3s ease;
		}

			.form-control:focus {
				border-color: #667eea;
				box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
				transform: translateY(-2px);
			}

		.btn-primary {
			background: var(--primary-gradient);
			border: none;
			border-radius: 50px;
			padding: 0.75rem 2rem;
			font-weight: 600;
		}

		.btn-danger {
			background: var(--secondary-gradient);
			border: none;
			border-radius: 50px;
			padding: 0.5rem 1.5rem;
		}

		.badge-modern {
			background: var(--primary-gradient);
			color: white;
			border-radius: 50px;
			padding: 0.5rem 1rem;
			font-weight: 500;
		}

		.pulse {
			animation: pulse 2s infinite;
		}

		@@keyframes pulse {
			0% {
				transform: scale(1);
			}

			50% {
				transform: scale(1.05);
			}

			100% {
				transform: scale(1);
			}
		}

		.floating {
			animation: floating 3s ease-in-out infinite;
		}

		@@keyframes floating {
			0%, 100% {
				transform: translateY(0px);
			}

			50% {
				transform: translateY(-10px);
			}
		}

		.glow-on-hover {
			position: relative;
		}

			.glow-on-hover::before {
				content: '';
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				border-radius: inherit;
				background: var(--primary-gradient);
				z-index: -1;
				filter: blur(15px);
				opacity: 0;
				transition: opacity 0.3s ease;
			}

			.glow-on-hover:hover::before {
				opacity: 0.7;
			}

		.activity-item {
			display: flex;
			align-items: center;
			padding: 1rem;
			border-radius: 10px;
			margin-bottom: 1rem;
			background: #f8f9fa;
			transition: all 0.3s ease;
		}

			.activity-item:hover {
				background: #e9ecef;
				transform: translateX(10px);
			}

		.activity-icon {
			width: 40px;
			height: 40px;
			border-radius: 50%;
			display: flex;
			align-items: center;
			justify-content: center;
			margin-right: 1rem;
		}

		.card-gradient-1 {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		}

		.card-gradient-2 {
			background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
		}

		.card-gradient-3 {
			background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
		}

		.card-gradient-4 {
			background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
		}

		.order-status-badge {
			padding: 0.25rem 0.75rem;
			border-radius: 50px;
			font-size: 0.875rem;
			font-weight: 500;
		}

		.status-pending {
			background: #fff3cd;
			color: #856404;
		}

		.status-processing {
			background: #d1ecf1;
			color: #0c5460;
		}

		.status-shipped {
			background: #d4edda;
			color: #155724;
		}

		.status-delivered {
			background: #d1e7dd;
			color: #0a3622;
		}
	</style>
}