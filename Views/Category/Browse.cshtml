@model IEnumerable<UShop.Models.Category>
@{
    ViewData["Title"] = "Browse Categories";
}

@functions {
    private static string GetRandomColor()
    {
        var colors = new[] { "#e3f2fd", "#fce4ec", "#f3e5f5", "#fff3e0", "#f9fbe7", "#ede7f6", "#ffebee", "#f1f8e9" };
        var rand = new Random();
        return colors[rand.Next(colors.Length)];
    }
    
    private static string GetCategoryIcon(string categoryName)
    {
        return categoryName.ToLower() switch
        {
            var name when name.Contains("electronic") => "fas fa-laptop",
            var name when name.Contains("fashion") || name.Contains("clothing") => "fas fa-tshirt",
            var name when name.Contains("home") || name.Contains("furniture") => "fas fa-home",
            var name when name.Contains("sports") || name.Contains("fitness") => "fas fa-dumbbell",
            var name when name.Contains("book") => "fas fa-book",
            var name when name.Contains("beauty") || name.Contains("health") => "fas fa-heart",
            var name when name.Contains("toy") => "fas fa-gamepad",
            var name when name.Contains("automotive") || name.Contains("car") => "fas fa-car",
            _ => "fas fa-tag"
        };
    }
}

<style>
    :root {
        --primary-color: #ff4757;
        --secondary-color: #ff3838;
        --accent-color: #ffd700;
        --text-dark: #2c3e50;
        --text-light: #7f8c8d;
        --shadow-light: rgba(0, 0, 0, 0.1);
        --shadow-medium: rgba(0, 0, 0, 0.15);
        --gradient-bg: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    body {
        background: var(--gradient-bg);
        min-height: 100vh;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    /* Page Header */
    .page-header {
        text-align: center;
        margin-bottom: 3rem;
        padding: 2rem 0;
        position: relative;
        opacity: 0;
        transform: translateY(-30px);
        animation: fadeInUp 0.8s ease forwards;
    }

    .page-title {
        font-size: 3.5rem;
        font-weight: 800;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 1rem;
        text-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .page-subtitle {
        font-size: 1.3rem;
        color: rgba(255, 255, 255, 0.9);
        font-weight: 400;
        max-width: 600px;
        margin: 0 auto;
    }

    .decorative-line {
        width: 100px;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
        margin: 2rem auto;
        border-radius: 2px;
        position: relative;
        overflow: hidden;
    }

    .decorative-line::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: shimmer 2s infinite;
    }

    /* Categories Grid */
    .categories-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .categories-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
    }

    /* Category Card */
    .category-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 8px 32px var(--shadow-light);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        opacity: 0;
        transform: translateY(30px);
        animation: fadeInUp 0.6s ease forwards;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .category-card:nth-child(odd) { animation-delay: 0.1s; }
    .category-card:nth-child(even) { animation-delay: 0.2s; }
    .category-card:nth-child(3n) { animation-delay: 0.3s; }

    .category-card:hover {
        transform: translateY(-15px) scale(1.02);
        box-shadow: 0 25px 50px var(--shadow-medium);
    }

    .category-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, 
            rgba(255, 71, 87, 0.1) 0%, 
            rgba(255, 215, 0, 0.1) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 1;
    }

    .category-card:hover::before {
        opacity: 1;
    }

    .category-link {
        text-decoration: none;
        color: inherit;
        display: flex;
        flex-direction: column;
        height: 100%;
        position: relative;
        z-index: 2;
    }

    .card-image-container {
        position: relative;
        height: 220px;
        overflow: hidden;
        background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
    }

    .card-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.4s ease;
        background: var(--gradient-bg);
    }

    .category-card:hover .card-image {
        transform: scale(1.1);
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(180deg, 
            rgba(0,0,0,0) 0%, 
            rgba(0,0,0,0.1) 50%, 
            rgba(0,0,0,0.3) 100%);
    }

    .category-icon {
        position: absolute;
        top: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        background: rgba(255, 255, 255, 0.9);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        color: var(--primary-color);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        z-index: 3;
    }

    .category-card:hover .category-icon {
        transform: scale(1.1);
        background: var(--primary-color);
        color: white;
    }

    .card-body {
        padding: 2rem;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .category-name {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-dark);
        margin-bottom: 0.75rem;
    }

    .category-description {
        color: var(--text-light);
        font-size: 1rem;
        line-height: 1.6;
        margin-bottom: 1.5rem;
        flex-grow: 1;
    }

    .explore-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 12px 24px;
        border-radius: 25px;
        font-weight: 600;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        border: none;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-top: auto;
    }

    .explore-button:hover {
        background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(255, 71, 87, 0.4);
    }

    .explore-button i {
        transition: transform 0.3s ease;
    }

    .category-card:hover .explore-button i {
        transform: translateX(5px);
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 5rem 2rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        backdrop-filter: blur(10px);
        margin: 2rem 0;
        opacity: 0;
        animation: fadeInUp 0.6s ease forwards;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .empty-icon {
        font-size: 4rem;
        color: rgba(255, 255, 255, 0.6);
        margin-bottom: 1.5rem;
    }

    .empty-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: white;
        margin-bottom: 0.75rem;
    }

    .empty-description {
        color: rgba(255, 255, 255, 0.8);
        font-size: 1.1rem;
    }

    /* Animations */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes shimmer {
        0% { left: -100%; }
        100% { left: 100%; }
    }

    @@keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .categories-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        
        .page-title {
            font-size: 2.5rem;
        }
        
        .page-subtitle {
            font-size: 1.1rem;
        }
        
        .card-body {
            padding: 1.5rem;
        }
        
        .card-image-container {
            height: 180px;
        }
    }

    @@media (max-width: 480px) {
        .page-title {
            font-size: 2rem;
        }
        
        .categories-grid {
            gap: 1rem;
        }
        
        .categories-container {
            padding: 0 0.5rem;
        }
    }

    /* Loading Animation */
    .loading {
        opacity: 0;
        animation: fadeInUp 0.5s ease forwards;
    }
</style>

<div class="categories-container">
    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">Browse Categories</h1>
        <p class="page-subtitle">Discover amazing products across all categories</p>
        <div class="decorative-line"></div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="categories-grid">
            @{int index = 0;}
            @foreach (var category in Model)
            {
                <div class="category-card loading" style="animation-delay: @((index * 0.1))s;">
                    <a asp-controller="Product"
                       asp-action="ByCategory"
                       asp-route-categoryId="@category.Id"
                       class="category-link">
                        
                        <div class="card-image-container" style="background: @GetRandomColor();">
                            <img src="~/images/electronics.jpg" 
                                 class="card-image" 
                                 alt="@category.Name"
                                 onerror="this.style.display='none'; this.parentNode.style.background='linear-gradient(135deg, @GetRandomColor(), #ffffff)';">
                            <div class="image-overlay"></div>
                            <div class="category-icon">
                                <i class="@GetCategoryIcon(category.Name ?? "")"></i>
                            </div>
                        </div>
                        
                        <div class="card-body">
                            <h3 class="category-name">@category.Name</h3>
                            <p class="category-description">
                                @if (!string.IsNullOrEmpty(category.Description))
                                {
                                    @category.Description
                                }
                                else
                                {
                                    <text>Explore our amazing collection of @category.Name products with the best quality and prices.</text>
                                }
                            </p>
                            <div class="explore-button">
                                Explore Now <i class="fas fa-arrow-right"></i>
                            </div>
                        </div>
                    </a>
                </div>
                index++;
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-box-open"></i>
            </div>
            <h3 class="empty-title">No Categories Available</h3>
            <p class="empty-description">Categories will appear here once they are added to the system.</p>
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize loading animations
        const cards = document.querySelectorAll('.category-card.loading');
        cards.forEach((card, index) => {
            setTimeout(() => {
                card.classList.remove('loading');
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });

        // Add hover effects
        const categoryCards = document.querySelectorAll('.category-card');
        categoryCards.forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-15px) scale(1.02)';
            });
            
            card.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0) scale(1)';
            });
        });

        // Add click animation
        const exploreButtons = document.querySelectorAll('.explore-button');
        exploreButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                // Create ripple effect
                const ripple = document.createElement('span');
                const rect = this.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;
                
                ripple.style.cssText = `
                    position: absolute;
                    border-radius: 50%;
                    background: rgba(255, 255, 255, 0.6);
                    transform: scale(0);
                    animation: ripple 0.6s linear;
                    left: ${x}px;
                    top: ${y}px;
                    width: ${size}px;
                    height: ${size}px;
                `;
                
                this.style.position = 'relative';
                this.style.overflow = 'hidden';
                this.appendChild(ripple);
                
                setTimeout(() => {
                    ripple.remove();
                }, 600);
            });
        });

        // Intersection Observer for scroll animations
        if ('IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.animationPlayState = 'running';
                    }
                });
            }, {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            });

            categoryCards.forEach(card => {
                observer.observe(card);
            });
        }
    });

    // Add ripple animation keyframes
    const style = document.createElement('style');
    style.textContent = 
        @@keyframes ripple {
            to {
                transform: scale(4);
                opacity: 0;
            }
        }
        
        .category-card {
            will-change: transform;
        }
        
        .explore-button {
            will-change: transform, box-shadow;
        }
    `;
    document.head.appendChild(style);
</script>